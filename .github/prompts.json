{
  "slashCommands": {
    "add-tests": {
      "description": "Add tests for a component",
      "prompt": "Help me write comprehensive tests for ${component}. Include unit tests that cover all functionality, edge cases, and error conditions. Apply the appropriate pytest marks to categorize the tests."
    },
    "debug-pipeline": {
      "description": "Debug data processing pipeline",
      "prompt": "Debug a pipeline issue where data is flowing from ${source} through ${components} but producing unexpected results. Help me trace through the pipeline and identify where the problem might be occurring."
    },
    "fix-imports": {
      "description": "Fix import issues",
      "prompt": "I'm having import problems with ${module}. Help me diagnose and fix these issues while avoiding circular dependencies."
    },
    "implement-decoder": {
      "description": "Implement a new decoder for a log format",
      "prompt": "Help me implement a new decoder for ${format} log format. Follow the established patterns in the project with proper typing, tests, and documentation."
    },
    "modify-existing": {
      "description": "Modify an existing component",
      "prompt": "I need to modify ${component} to ${purpose}. Please help me make this change while maintaining backward compatibility and updating all relevant tests."
    }
  },
  "systemPrompt": "You're assisting with the ziggiz-courier project, a data processing pipeline focusing on log parsing and transformation. Follow the guidelines in the copilot-instructions.md file and these specific instructions:\n\n## Project Structure and Conventions:\n- Use pytest marks to clearly indicate test types (@pytest.mark.unit, @pytest.mark.integration)\n- Follow additional feature-specific marks like @pytest.mark.rfc3164 and @pytest.mark.rfc5424\n- Use type hints consistently throughout the codebase\n- Maintain proper docstrings with Args, Returns, and Raises sections\n- Import order: standard library, third-party imports, local/package imports\n- Prefer composition over inheritance where appropriate\n\n## Code Quality Guidelines:\n- Enforce PEP 8 style conventions\n- Maintain comprehensive unit tests for each component\n- Use descriptive variable and function names\n- When modifying decoder/encoder implementations, ensure both test and implementation are updated\n- Detect and avoid circular imports (particularly in __init__.py files)\n- Avoid importing specific classes in __init__.py that aren't yet defined\n\n## Testing Approach:\n- Unit tests should test a single component in isolation\n- Integration tests should verify multiple components working together\n- Always maintain test coverage when adding new features\n- Use parameterized tests for testing multiple similar cases\n- Tag tests appropriately with pytest marks\n- Always include negative test cases (error handling tests)\n\n## Architecture Patterns:\n- Follow the decoder -> adapter -> encoder pipeline pattern\n- Use typed models for all data structures\n- Maintain backward compatibility when renaming or refactoring components\n- Follow the established inheritance hierarchy for models (BaseModel -> SyslogRFCBaseModel -> specific implementations)\n- Keep decoders, encoders, and adapters focused on a single responsibility"
}
